一：概念
封装：
	在java中，我们对类的封装，对方法的封装，在其他类中只需要调用这个类或者方法就行。
	通俗点理解，我们在启动汽车的时候。汽车对里面的零件构造进行了封装，只要提供给我们一个钥匙口，我们只需要用钥匙启动就行。

继承：
	在java中，我们是在父子类之间定义继承关系的。只要子类继承父类，就可以调用父类中的方法（注：父类私有的方法子类无法调用）。
	通俗点理解，我们家庭中，也是这种组成关系。（注：父亲私有的东西不能用）

多态：
	编译时多态：函数的重载，构造方法之间
	运行时多态：函数的重写，父子类之间（向上造型-基于继承）

二：作用
封装：
	1:提高了代码的复用性
	2:提高了代码的安全性

继承：
	1:提高了代码的复用性
	2:提高了代码的安全性

多态：
	提高了代码的灵活性
	提高了代码的耦合性（配合反射）
————————————————



3.1、“一个接口，多种方法”

同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。

3.2、多态的三个条件:

 a.    继承的存在(继承是多态的基础,没有继承就没有多态).
 b.    子类重写父类的方法(多态下调用子类重写的方法).
 c.    父类引用变量指向子类对象(子类到父类的类型转换).

重载（overload）和重写（override）是实现多态的两种主要方式。
编译时多态：函数的重载，构造方法之间
运行时多态：函数的重写，父子类之间（向上造型-基于继承）

3.3、实现多态：

接口多态性。
继承多态性。
通过抽象类实现的多态性。
